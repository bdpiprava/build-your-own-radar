{
  "date": "10/12/2021",
  "name": "Tech Radar",
  "author": "Spark Networks",
  "logo_link": "",
  "quadrants": [
    {
      "name": "Techniques",
      "rings": [
        {
          "name": "asses",
          "blips": [
            {
              "name": "Four key metrics",
              "new": false,
              "description": "To measure software delivery performance, more and more organizations are turning to the four key metrics as defined by the DORA research program: change lead time, deployment frequency, mean time to restore (MTTR) and change fail percentage. This research and its statistical analysis have shown a clear link between high delivery performance and these metrics; they provide a great leading indicator for how a team, or even a whole delivery organization, is doing.\n\nAnd as with all metrics, we recommend to always keep in mind the ultimate intention behind a measurement and use them to reflect and learn. For example, before spending weeks to build up sophisticated dashboard tooling, consider just regularly taking the [DORA quick check](https://cloud.google.com/devops/) in team retrospectives. This gives the team the opportunity to reflect on which capabilities they could work on to improve their metrics, which can be much more effective than over-detailed out-of-the-box tooling.\n\n- **Deployment Frequency**: How often an organization successfully releases to production\n- **Lead Time for Changes**: The amount of time it takes a commit(PR/MR) to get into production\n- **Change Failure Rate**: The percentage of deployments causing a failure in production\n- **Time to Restore Service**: How long it takes an organization to recover from a failure in production"
            }
          ]
        }
      ]
    },
    {
      "name": "Tools",
      "rings": [
        {
          "name": "adopt",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        },
        {
          "name": "asses",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        },
        {
          "name": "trial",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        },
        {
          "name": "hold",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        }
      ]
    },
    {
      "name": "Platforms",
      "rings": [
        {
          "name": "adopt",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        },
        {
          "name": "asses",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        },
        {
          "name": "trial",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        },
        {
          "name": "hold",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            }
          ]
        }
      ]
    },
    {
      "name": "Language & Frameworks",
      "rings": [
        {
          "name": "adopt",
          "blips": [
            {
              "name": "GoLang",
              "new": false,
              "description": "The [Go language](https://golang.org/) gradually changed its status from \"Just Another Language\" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity."
            },
            {
              "name": "React.js",
              "new": false,
              "description": "In the avalanche of front-end JavaScript frameworks, [React.js](https://reactjs.org) stands out due to its design around a reactive data flow. Allowing only one-way data binding greatly simplifies the rendering logic and avoids many of the issues that commonly plague applications written with other frameworks. We're seeing the benefits of React.js on a growing number of projects, large and small, while at the same time we continue to be concerned about the state and the future of other popular frameworks like AngularJS. This has led to React.js becoming our default choice for JavaScript frameworks.\nAdaptation in Spark:\n1. [UI Components](https://gitlab.affinitas.de/frontend/ui-components)\n1. [INDY Client](https://gitlab.affinitas.de/clients/indy-client)"
            },
            {
              "name": "React Hooks",
              "new": false,
              "description": "[React Hooks](https://reactjs.org/docs/hooks-intro.html) has introduced a new approach of managing stateful logic; given React components have always been closer to functions than classes, Hooks have embraced this and brought the state to functions, instead of using classes to take function to the state with methods. Rolling this completely on your own can quickly become tricky; therefore we recommend considering a combination of [React Context](https://reactjs.org/docs/context.html) and [useContext](https://reactjs.org/docs/hooks-reference.html#usecontext), useReducer hooks, along the lines explained in this [blog post](https://blog.logrocket.com/guide-to-react-usereducer-hook/)."
            }
          ]
        },
        {
          "name": "trial",
          "blips": [
            {
              "name": "React Query",
              "new": false,
              "description": "[React Query](https://react-query.tanstack.com) is often described as the missing data-fetching library for React. Fetching, caching, synchronizing and updating server state is a common requirement in many React applications, and although the requirements are well-understood, getting the implementation right is notoriously difficult. React Query provides a straightforward solution using hooks. As an application developer you simply pass a function that resolves your data and leave everything else to the framework. We like that it works out-of-the-box but still offers a lot of configuration when needed."
            }
          ]
        },
        {
          "name": "asses",
          "blips": [
            {
              "name": "Tailwind CSS",
              "new": false,
              "description": "CSS tools and frameworks offer predesigned components for fast results; after a while, however, they can complicate customization. [Tailwind CSS](https://tailwindcss.com/) proposes an interesting approach by providing lower-level utility CSS classes to create building blocks without opinionated styles and aiming for easy customization. The breadth of the low-level utilities allows you to avoid writing any classes or CSS on your own which leads to a more maintainable codebase in the long term. It seems that Tailwind CSS offers the right balance between reusability and customization to create visual components."
            },
            {
              "name": "Headless UI",
              "new": false,
              "description": "[Headless UI](https://headlessui.dev/) is an unstyled component library for either [React.js](https://www.thoughtworks.com/en-de/radar/languages-and-frameworks/react-js) or [Vue.js](https://www.thoughtworks.com/en-de/radar/languages-and-frameworks/vue-js) from the same people that created [Tailwind CSS](https://www.thoughtworks.com/en-de/radar/languages-and-frameworks/tailwind-css). It is easy to customize and work around the default styles that other component libraries come with. The components' rich functionality and full accessibility, combined with the frictionless styling, allows developers to focus more productively on the business problem and user experience. Unsurprisingly, Headless UI also pairs well with Tailwind CSS classes."
            }
          ]
        }
      ]
    }
  ]
}
